TC - o(n)+o(n)+o(n);
        sc=o(1);
        int n=height.length;
        int res=0 ;
        int left []= new int[n];
        int right[] =new int[n];
        left[0]=height[0];
        right[n-1]=height[n-1];


        for(int i=1 ;i<n ;i++)
        {
            left[i]=Math.max(left[i-1],height[i]);
            
        }
        for(int i=n-2 ;i>=0 ;i--)
        {
            right[i]=Math.max(right[i+1],height[i]);
        }
        for(int i=0 ;i<n ;i++)
        {
            res+=Math.min(left[i],right[i])-height[i];
        }
        return res;

--------------------------------
 TC - O(N) ,, SC- O(1)
class Solution {
    public int trap(int[] height) {
        int left=0;
        int right= height.length-1;
        int maxleft=0;
        int maxright=0;
        int ans=0;

       while(left<=right)
       {
           if(height[left]<=height[right])
           {
               if (height[left]>=maxleft) 
                  maxleft= height[left];
               else
                  ans+=maxleft-height[left];

                left++;
           }
           else
           {
               if(height[right] >=maxright) maxright= height[right];
               else
                ans+=maxright- height[right];

            right--;
           }
       }
       return ans;

    }
}
